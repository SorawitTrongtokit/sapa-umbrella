import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';
import { useToast } from '@/hooks/use-toast';
import { 
  RefreshCw, Download, AlertTriangle, Settings, 
  Database, Users, Shield, Bell, FileText,
  Trash2, RotateCcw, CheckCircle, XCircle
} from 'lucide-react';
import { updateUmbrella, addActivity, clearAllActivities } from '@/lib/firebase';

interface ManagementToolsProps {
  activities: any[];
  umbrellas: Record<number, any>;
}

export function ManagementTools({ activities, umbrellas }: ManagementToolsProps) {
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [showClearDialog, setShowClearDialog] = useState(false);
  const [showResetDialog, setShowResetDialog] = useState(false);

  // ‡∏´‡∏≤‡∏£‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
  const problemUmbrellas = Object.values(umbrellas).filter((umbrella: any) => {
    const lastActivity = activities
      .filter(a => a.umbrellaId === umbrella.id)
      .sort((a, b) => b.timestamp - a.timestamp)[0];
    
    if (!lastActivity) return false;
    
    const hoursSinceActivity = (Date.now() - lastActivity.timestamp) / (1000 * 60 * 60);
    
    // ‡∏£‡πà‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°‡∏°‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    return umbrella.status === 'borrowed' && hoursSinceActivity > 24;
  });

  // ‡∏£‡πà‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ
  const unusedUmbrellas = Object.values(umbrellas).filter((umbrella: any) => {
    const hasActivity = activities.some(a => a.umbrellaId === umbrella.id);
    return !hasActivity;
  });

  // ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  const systemHealth = {
    totalUmbrellas: 21,
    available: Object.values(umbrellas).filter((u: any) => u.status === 'available').length,
    borrowed: Object.values(umbrellas).filter((u: any) => u.status === 'borrowed').length,
    problems: problemUmbrellas.length,
    unused: unusedUmbrellas.length,
    totalActivities: activities.length
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏£‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const forceReturnAll = async () => {
    setIsLoading(true);
    try {
      const borrowedUmbrellas = Object.values(umbrellas).filter((u: any) => u.status === 'borrowed');
      
      for (const umbrella of borrowedUmbrellas) {
        await updateUmbrella(umbrella.id, {
          id: umbrella.id,
          status: 'available',
          currentLocation: umbrella.currentLocation,
          borrower: null,
          history: umbrella.history || []
        });

        await addActivity({
          type: 'admin_update',
          umbrellaId: umbrella.id,
          location: umbrella.currentLocation,
          timestamp: Date.now(),
          note: 'Admin force return all umbrellas'
        });
      }

      toast({
        title: "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏£‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: `‡∏Ñ‡∏∑‡∏ô‡∏£‡πà‡∏° ${borrowedUmbrellas.length} ‡∏Ñ‡∏±‡∏ô`,
        variant: "default"
      });
    } catch (error) {
      toast({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏£‡πà‡∏°‡πÑ‡∏î‡πâ",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö
  const resetSystem = async () => {
    setShowResetDialog(true);
  };

  const handleConfirmReset = async () => {
    setIsLoading(true);
    setShowResetDialog(false);
    try {
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô available
      for (let i = 1; i <= 21; i++) {
        let defaultLocation;
        if (i >= 1 && i <= 7) defaultLocation = "‡πÉ‡∏ï‡πâ‡πÇ‡∏î‡∏°";
        else if (i >= 8 && i <= 14) defaultLocation = "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤";
        else defaultLocation = "‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£";

        await updateUmbrella(i, {
          id: i,
          status: 'available',
          currentLocation: defaultLocation,
          borrower: null,
          history: []
        });
      }

      await addActivity({
        type: 'admin_update',
        umbrellaId: 0,
        location: '‡πÉ‡∏ï‡πâ‡πÇ‡∏î‡∏°',
        timestamp: Date.now(),
        note: 'System reset by admin'
      });

      toast({
        title: "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: "‡∏£‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏á",
        variant: "default"
      });
    } catch (error) {
      toast({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö Activity ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const clearActivities = async () => {
    setShowClearDialog(true);
  };

  const handleConfirmClear = async () => {
    setIsLoading(true);
    setShowClearDialog(false);
    
    try {
      await clearAllActivities();

      toast({
        title: "‡∏•‡∏ö Activity ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ",
        description: `‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${activities.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß`,
        variant: "default"
      });
    } catch (error) {
      toast({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‚ùå",
        description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö Activity ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const exportData = () => {
    const exportData = {
      umbrellas: Object.values(umbrellas),
      activities: activities,
      exportTime: new Date().toISOString(),
      systemHealth
    };

    const dataStr = JSON.stringify(exportData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `umbrella-system-data-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    toast({
      title: "‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      description: "‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß",
      variant: "default"
    });
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold text-gray-900">üõ†Ô∏è Management Tools</h2>
      </div>

      {/* System Health Overview */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5" />
            ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            <div className="text-center p-3 bg-green-50 rounded-lg">
              <div className="text-2xl font-bold text-green-600">{systemHealth.available}</div>
              <div className="text-sm text-green-800">‡∏£‡πà‡∏°‡∏ß‡πà‡∏≤‡∏á</div>
            </div>
            <div className="text-center p-3 bg-orange-50 rounded-lg">
              <div className="text-2xl font-bold text-orange-600">{systemHealth.borrowed}</div>
              <div className="text-sm text-orange-800">‡∏£‡πà‡∏°‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°</div>
            </div>
            <div className="text-center p-3 bg-red-50 rounded-lg">
              <div className="text-2xl font-bold text-red-600">{systemHealth.problems}</div>
              <div className="text-sm text-red-800">‡∏£‡πà‡∏°‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤</div>
            </div>
            <div className="text-center p-3 bg-gray-50 rounded-lg">
              <div className="text-2xl font-bold text-gray-600">{systemHealth.unused}</div>
              <div className="text-sm text-gray-800">‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ</div>
            </div>
            <div className="text-center p-3 bg-blue-50 rounded-lg">
              <div className="text-2xl font-bold text-blue-600">{systemHealth.totalActivities}</div>
              <div className="text-sm text-blue-800">‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
            </div>
            <div className="text-center p-3 bg-purple-50 rounded-lg">
              <div className="text-2xl font-bold text-purple-600">
                {Math.round((systemHealth.available / systemHealth.totalUmbrellas) * 100)}%
              </div>
              <div className="text-sm text-purple-800">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ß‡πà‡∏≤‡∏á</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Management Actions */}
      <Tabs defaultValue="actions" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="actions">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</TabsTrigger>
          <TabsTrigger value="problems">‡∏õ‡∏±‡∏ç‡∏´‡∏≤</TabsTrigger>
          <TabsTrigger value="data">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</TabsTrigger>
        </TabsList>

        {/* Actions Tab */}
        <TabsContent value="actions" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏°</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <Button
                  onClick={forceReturnAll}
                  disabled={isLoading || systemHealth.borrowed === 0}
                  className="w-full bg-orange-600 hover:bg-orange-700"
                >
                  <RotateCcw className="w-4 h-4 mr-2" />
                  ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏£‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({systemHealth.borrowed} ‡∏Ñ‡∏±‡∏ô)
                </Button>

                <Button
                  onClick={resetSystem}
                  disabled={isLoading}
                  variant="destructive"
                  className="w-full"
                >
                  <RefreshCw className="w-4 h-4 mr-2" />
                  ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                </Button>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <Button
                  onClick={exportData}
                  className="w-full bg-blue-600 hover:bg-blue-700"
                >
                  <Download className="w-4 h-4 mr-2" />
                  ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                </Button>

                <Button
                  onClick={clearActivities}
                  disabled={isLoading || activities.length === 0}
                  variant="destructive"
                  className="w-full bg-red-600 hover:bg-red-700 relative"
                  title="‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πà‡∏°)"
                >
                  <Trash2 className="w-4 h-4 mr-2" />
                  ‡∏•‡∏ö Activity ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 
                  {activities.length > 0 && (
                    <Badge variant="secondary" className="ml-2 bg-white text-red-600">
                      {activities.length}
                    </Badge>
                  )}
                </Button>

                <Button
                  onClick={() => window.location.reload()}
                  variant="outline"
                  className="w-full"
                >
                  <RefreshCw className="w-4 h-4 mr-2" />
                  ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                </Button>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Problems Tab */}
        <TabsContent value="problems" className="space-y-4">
          {problemUmbrellas.length > 0 ? (
            <Alert className="border-red-200 bg-red-50">
              <AlertTriangle className="h-4 w-4 text-red-600" />
              <AlertDescription className="text-red-800">
                ‡∏û‡∏ö‡∏£‡πà‡∏° {problemUmbrellas.length} ‡∏Ñ‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°‡∏°‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
              </AlertDescription>
            </Alert>
          ) : (
            <Alert className="border-green-200 bg-green-50">
              <CheckCircle className="h-4 w-4 text-green-600" />
              <AlertDescription className="text-green-800">
                ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡πà‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°‡∏Ñ‡πâ‡∏≤‡∏á‡∏ô‡∏≤‡∏ô ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
              </AlertDescription>
            </Alert>
          )}

          <div className="grid grid-cols-1 gap-4">
            {problemUmbrellas.map((umbrella: any) => {
              const lastActivity = activities
                .filter(a => a.umbrellaId === umbrella.id)
                .sort((a, b) => b.timestamp - a.timestamp)[0];
              
              const hoursSince = Math.floor((Date.now() - lastActivity.timestamp) / (1000 * 60 * 60));

              return (
                <Card key={umbrella.id} className="border-red-200">
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="font-semibold text-red-800">‡∏£‡πà‡∏° #{umbrella.id}</h3>
                        <p className="text-sm text-red-600">
                          ‡∏¢‡∏∑‡∏°‡πÇ‡∏î‡∏¢: {umbrella.borrower?.nickname} | {hoursSince} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
                        </p>
                        <p className="text-xs text-gray-600">
                          ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {umbrella.currentLocation}
                        </p>
                      </div>
                      <div className="flex gap-2">
                        <Badge variant="destructive">‡∏Ñ‡πâ‡∏≤‡∏á‡∏ô‡∏≤‡∏ô</Badge>
                        <Button
                          size="sm"
                          onClick={async () => {
                            setIsLoading(true);
                            try {
                              await updateUmbrella(umbrella.id, {
                                ...umbrella,
                                status: 'available',
                                borrower: null
                              });
                              
                              await addActivity({
                                type: 'admin_update',
                                umbrellaId: umbrella.id,
                                location: umbrella.currentLocation,
                                timestamp: Date.now(),
                                note: `Force return overdue umbrella (${hoursSince} hours)`
                              });

                              toast({
                                title: "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                                description: `‡∏£‡πà‡∏° #${umbrella.id} ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß`,
                                variant: "default"
                              });
                            } catch (error) {
                              toast({
                                title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
                                variant: "destructive"
                              });
                            } finally {
                              setIsLoading(false);
                            }
                          }}
                          disabled={isLoading}
                        >
                          ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>

          {unusedUmbrellas.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="text-lg text-gray-600">‡∏£‡πà‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex flex-wrap gap-2">
                  {unusedUmbrellas.map((umbrella: any) => (
                    <Badge key={umbrella.id} variant="outline" className="text-gray-600">
                      #{umbrella.id} ({umbrella.currentLocation})
                    </Badge>
                  ))}
                </div>
                <p className="text-sm text-gray-600 mt-2">
                  ‡∏£‡πà‡∏°‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡πâ‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
                </p>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        {/* Data Tab */}
        <TabsContent value="data" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Database className="h-5 w-5" />
                  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex justify-between">
                  <span>Firebase Database:</span>
                  <Badge variant="outline" className="text-green-600">Online</Badge>
                </div>
                <div className="flex justify-between">
                  <span>Total Records:</span>
                  <span>{Object.keys(umbrellas).length + activities.length}</span>
                </div>
                <div className="flex justify-between">
                  <span>Activity Records:</span>
                  <span className="font-bold">{activities.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
                </div>
                <div className="flex justify-between">
                  <span>Last Activity:</span>
                  <span>
                    {activities.length > 0 
                      ? new Date(activities[0].timestamp).toLocaleString('th-TH')
                      : '‡πÑ‡∏°‡πà‡∏°‡∏µ'
                    }
                  </span>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="h-5 w-5" />
                  ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <Alert className="p-3">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertDescription className="text-sm">
                    <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏•‡∏ö Activity:</strong><br/>
                    ‚Ä¢ ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°<br/>
                    ‚Ä¢ ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πà‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô<br/>
                    ‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
                  </AlertDescription>
                </Alert>
                
                <div className="text-sm space-y-1">
                  <div className="flex justify-between">
                    <span>‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°:</span>
                    <span>{activities.filter(a => a.type === 'borrow').length}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô:</span>
                    <span>{activities.filter(a => a.type === 'return').length}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Admin Actions:</span>
                    <span>{activities.filter(a => a.type === 'admin_update').length}</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>

      {/* Clear Activities Confirmation Dialog */}
      <AlertDialog open={showClearDialog} onOpenChange={setShowClearDialog}>
        <AlertDialogContent className="max-w-md mx-auto">
          <AlertDialogHeader>
            <AlertDialogTitle className="flex items-center gap-2">
              <Trash2 className="w-5 h-5 text-red-500" />
              ‡∏•‡∏ö Activity ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            </AlertDialogTitle>
            <AlertDialogDescription asChild>
              <div className="text-left space-y-3">
                <div className="bg-red-50 p-3 rounded-lg border border-red-200">
                  <div className="flex items-start gap-2">
                    <AlertTriangle className="w-4 h-4 text-red-600 mt-0.5 flex-shrink-0" />
                    <div>
                      <div className="font-medium text-red-900">‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô!</div>
                      <div className="text-sm text-red-800 mt-1">
                        ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ<strong>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ</strong>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="bg-blue-50 p-3 rounded-lg">
                  <h4 className="font-medium text-blue-900 mb-2">‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:</h4>
                  <div className="text-sm text-blue-800 space-y-1">
                    <div>‚Ä¢ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: <strong>{activities.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</strong></div>
                    <div>‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°: <strong>{activities.filter(a => a.type === 'borrow').length} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</strong></div>
                    <div>‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô: <strong>{activities.filter(a => a.type === 'return').length} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</strong></div>
                    <div>‚Ä¢ Admin Actions: <strong>{activities.filter(a => a.type === 'admin_update').length} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</strong></div>
                  </div>
                </div>
                
                <div className="bg-green-50 p-3 rounded-lg">
                  <div className="text-sm text-green-800">
                    <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong><br/>
                    ‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πà‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á<br/>
                    ‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï<br/>
                    ‚Ä¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
                  </div>
                </div>
              </div>
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setShowClearDialog(false)}
              disabled={isLoading}
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={handleConfirmClear}
              disabled={isLoading}
              className="bg-red-600 hover:bg-red-700"
            >
              <Trash2 className="w-4 h-4 mr-2" />
              {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö...' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö'}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Reset System Confirmation Dialog */}
      <AlertDialog open={showResetDialog} onOpenChange={setShowResetDialog}>
        <AlertDialogContent className="max-w-md mx-auto">
          <AlertDialogHeader>
            <AlertDialogTitle className="flex items-center gap-2">
              <RotateCcw className="w-5 h-5 text-orange-500" />
              ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö
            </AlertDialogTitle>
            <AlertDialogDescription asChild>
              <div className="text-left space-y-3">
                <div className="bg-orange-50 p-3 rounded-lg border border-orange-200">
                  <div className="flex items-start gap-2">
                    <AlertTriangle className="w-4 h-4 text-orange-600 mt-0.5 flex-shrink-0" />
                    <div>
                      <div className="font-medium text-orange-900">‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!</div>
                      <div className="text-sm text-orange-800 mt-1">
                        ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏∞‡∏•‡∏ö Activity ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πà‡∏°
                      </div>
                    </div>
                  </div>
                </div>

                <div className="bg-red-50 p-3 rounded-lg">
                  <h4 className="font-medium text-red-900 mb-2">‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô:</h4>
                  <div className="text-sm text-red-800 space-y-1">
                    <div>‚Ä¢ ‡∏£‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏ß‡πà‡∏≤‡∏á"</div>
                    <div>‚Ä¢ ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                    <div>‚Ä¢ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</div>
                    <div>‚Ä¢ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                  </div>
                </div>
              </div>
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel 
              onClick={() => setShowResetDialog(false)}
              disabled={isLoading}
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={handleConfirmReset}
              disabled={isLoading}
              className="bg-orange-600 hover:bg-orange-700"
            >
              <RotateCcw className="w-4 h-4 mr-2" />
              {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï...' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï'}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}
