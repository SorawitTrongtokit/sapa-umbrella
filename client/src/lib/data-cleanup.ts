/**
 * Data Cleanup Utility for Firebase Free Tier
 * ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï Free Plan
 */

import { ref, get, set, push, remove } from 'firebase/database';
import { database } from './firebase';
import { FIREBASE_LIMITS } from './performance-config';

interface CleanupResult {
  activitiesRemoved: number;
  oldLogsRemoved: number;
  totalDataSaved: number;
}

/**
 * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Activities ‡πÄ‡∏Å‡πà‡∏≤
 * ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 50 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
 */
export const cleanupActivities = async (): Promise<number> => {
  if (!database) return 0;

  try {
    const activitiesRef = ref(database, 'activities');
    const snapshot = await get(activitiesRef);
    
    if (!snapshot.exists()) return 0;
    
    const activities = snapshot.val();
    const activityEntries = Object.entries(activities);
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ limit ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á
    if (activityEntries.length > FIREBASE_LIMITS.database.maxActivities) {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ (timestamp)
      activityEntries.sort((a, b) => b[1].timestamp - a[1].timestamp);
      
      // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
      const toKeep = activityEntries.slice(0, FIREBASE_LIMITS.database.maxActivities);
      const toRemove = activityEntries.slice(FIREBASE_LIMITS.database.maxActivities);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
      const cleanedActivities = Object.fromEntries(toKeep);
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó database
      await set(activitiesRef, cleanedActivities);
      
      console.log(`üßπ Cleaned up ${toRemove.length} old activities`);
      return toRemove.length;
    }
    
    return 0;
  } catch (error) {
    console.error('Error cleaning up activities:', error);
    return 0;
  }
};

/**
 * ‡∏•‡∏ö log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
 */
export const cleanupLogs = async (): Promise<number> => {
  if (!database) return 0;

  try {
    const cutoffTime = Date.now() - (7 * 24 * 60 * 60 * 1000); // 7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
    let removedCount = 0;

    // ‡∏•‡∏ö login attempts ‡πÄ‡∏Å‡πà‡∏≤
    const loginsRef = ref(database, 'loginAttempts');
    const loginSnapshot = await get(loginsRef);
    
    if (loginSnapshot.exists()) {
      const logins = loginSnapshot.val();
      const cleanedLogins: any = {};
      
      Object.entries(logins).forEach(([key, value]: [string, any]) => {
        if (value.timestamp > cutoffTime) {
          cleanedLogins[key] = value;
        } else {
          removedCount++;
        }
      });
      
      await set(loginsRef, cleanedLogins);
    }

    console.log(`üßπ Cleaned up ${removedCount} old log entries`);
    return removedCount;
  } catch (error) {
    console.error('Error cleaning up logs:', error);
    return 0;
  }
};

/**
 * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ
 */
export const cleanupInactiveUsers = async (): Promise<number> => {
  if (!database) return 0;

  try {
    const cutoffTime = Date.now() - (30 * 24 * 60 * 60 * 1000); // 30 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
    const usersRef = ref(database, 'users');
    const snapshot = await get(usersRef);
    
    if (!snapshot.exists()) return 0;
    
    const users = snapshot.val();
    let removedCount = 0;
    
    for (const [uid, userData] of Object.entries(users) as [string, any][]) {
      // ‡πÑ‡∏°‡πà‡∏•‡∏ö admin ‡πÅ‡∏•‡∏∞ owner
      if (userData.role === 'admin' || userData.role === 'owner') continue;
      
      // ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏°‡∏≤‡∏ô‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
      if (!userData.lastLoginAt && userData.createdAt < cutoffTime) {
        await remove(ref(database, `users/${uid}`));
        removedCount++;
      }
    }

    console.log(`üßπ Cleaned up ${removedCount} inactive users`);
    return removedCount;
  } catch (error) {
    console.error('Error cleaning up inactive users:', error);
    return 0;
  }
};

/**
 * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export const runFullCleanup = async (): Promise<CleanupResult> => {
  console.log('üßπ Starting data cleanup for Firebase Free Tier...');
  
  const result: CleanupResult = {
    activitiesRemoved: 0,
    oldLogsRemoved: 0,
    totalDataSaved: 0,
  };

  try {
    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÅ‡∏ö‡∏ö parallel
    const [activitiesRemoved, oldLogsRemoved] = await Promise.all([
      cleanupActivities(),
      cleanupLogs(),
    ]);

    result.activitiesRemoved = activitiesRemoved;
    result.oldLogsRemoved = oldLogsRemoved;
    result.totalDataSaved = activitiesRemoved + oldLogsRemoved;

    console.log('üßπ Cleanup completed:', result);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥ cleanup ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if (database) {
      await set(ref(database, 'system/lastCleanup'), Date.now());
    }

    return result;
  } catch (error) {
    console.error('Error during cleanup:', error);
    return result;
  }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥ cleanup ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
export const shouldRunCleanup = async (): Promise<boolean> => {
  if (!database) return false;

  try {
    const lastCleanupRef = ref(database, 'system/lastCleanup');
    const snapshot = await get(lastCleanupRef);
    
    if (!snapshot.exists()) return true;
    
    const lastCleanup = snapshot.val();
    const timeSinceCleanup = Date.now() - lastCleanup;
    
    // ‡∏ó‡∏≥ cleanup ‡∏ó‡∏∏‡∏Å 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    return timeSinceCleanup > FIREBASE_LIMITS.database.cleanupInterval;
  } catch (error) {
    console.error('Error checking cleanup status:', error);
    return true; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏ó‡∏≥ cleanup ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  }
};

/**
 * Auto cleanup ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
 */
export const autoCleanup = async (): Promise<void> => {
  if (import.meta.env.PROD && await shouldRunCleanup()) {
    // ‡∏ó‡∏≥ cleanup ‡πÅ‡∏ö‡∏ö background ‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å UI
    setTimeout(async () => {
      try {
        await runFullCleanup();
      } catch (error) {
        console.error('Background cleanup failed:', error);
      }
    }, 5000); // ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
  }
};
