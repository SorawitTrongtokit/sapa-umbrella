Act like a professional full-stack web developer with expertise in React.js, Firebase Realtime Database, Firebase Authentication, and responsive UI/UX design for school-based applications.

üéØ Objective:
Design and build a complete real-time umbrella borrowing and returning system for students at a school. The application must be mobile-friendly, built with React.js (you may choose between Vite or Create React App), and must use Firebase Realtime Database for all data interactions.

üèóÔ∏è Requirements:
The app should have three main user-facing interfaces and one hidden admin dashboard. The system tracks 21 umbrellas distributed in three campus locations. Umbrella groupings are fixed as follows:
- Umbrellas 1‚Äì7: ‡πÉ‡∏ï‡πâ‡πÇ‡∏î‡∏°
- Umbrellas 8‚Äì14: ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤
- Umbrellas 15‚Äì21: ‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£

‚úÖ Step-by-step instructions:

**Step 1 ‚Äî Project Setup**
- Choose between Vite or Create React App (CRA), and justify the choice based on performance, scalability, and development speed.
- Set up a clean file structure with folders for: `components/`, `pages/`, `styles/`, and `firebase/`.
- Include necessary dependencies such as React Router, TailwindCSS or CSS Modules, and Firebase SDK.

**Step 2 ‚Äî Firebase Integration**
- Integrate the following Firebase configuration:
```js
const firebaseConfig = {
  apiKey: "AIzaSyCKrI6yFRoRW9QlYQY9VxMe0DxC1yTEusw",
  authDomain: "umbrella-system-e0ae7.firebaseapp.com",
  databaseURL: "https://umbrella-system-e0ae7-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId: "umbrella-system-e0ae7",
  storageBucket: "umbrella-system-e0ae7.appspot.com",
  messagingSenderId: "644775621893",
  appId: "1:644775621893:web:76175ce428a8d99550336c",
  measurementId: "G-4J12KF1H0B"
};

Show best practices for hiding API keys using .env files and how to prevent accidental exposure in production builds.

Step 3 ‚Äî Create Three Core UI Pages
	1.	UmbrellaStatus Page (Public dashboard for real-time display)
	‚Ä¢	Show a visual status of all 21 umbrellas.
	‚Ä¢	Indicate each umbrella‚Äôs availability, last borrow/return time, current location, and borrower nickname.
	‚Ä¢	Do NOT display phone numbers.
	‚Ä¢	Use color-coding or icons to indicate status (borrowed vs. available).
	‚Ä¢	Data must sync in real-time.
	2.	FormBorrow Component
	‚Ä¢	Collects: nickname (text), phone number (must be 10-digit numeric only), umbrella ID (dropdown or input between 1‚Äì21), and location (dropdown: ‡πÉ‡∏ï‡πâ‡πÇ‡∏î‡∏°, ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤, ‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£).
	‚Ä¢	Validate all inputs and show error messages on incorrect formats.
	‚Ä¢	On submission, update Firebase with:
	‚Ä¢	Borrower data
	‚Ä¢	Set umbrella status to ‚Äúborrowed‚Äù
	‚Ä¢	Save timestamp
	‚Ä¢	Show success/failure toast messages.
	3.	FormReturn Component
	‚Ä¢	Collects: umbrella ID and return location.
	‚Ä¢	Update Firebase with:
	‚Ä¢	New location
	‚Ä¢	Status as ‚Äúavailable‚Äù
	‚Ä¢	Return timestamp
	‚Ä¢	Show success/failure toast messages.

Step 4 ‚Äî Real-Time Sync
	‚Ä¢	Use onValue from Firebase or useEffect with listeners to sync the UI live.
	‚Ä¢	Ensure that changes to any umbrella‚Äôs status immediately reflect across all pages.

Step 5 ‚Äî Firebase DB Schema Design
	‚Ä¢	Suggest a clear, scalable structure. For example:

umbrellas: {
  "1": {
    status: "available" | "borrowed",
    currentLocation: "‡πÉ‡∏ï‡πâ‡πÇ‡∏î‡∏°" | "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤" | "‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
    borrower: {
      nickname: "John",
      timestamp: 1723457200
    },
    history: [
      { type: "borrow", time: 1723457200, location: "‡πÉ‡∏ï‡πâ‡πÇ‡∏î‡∏°" },
      { type: "return", time: 1723458400, location: "‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£" }
    ]
  },
  ...
}

Step 6 ‚Äî UX Feedback
	‚Ä¢	Add toast or modal alerts on all success/error actions (borrow, return, form validation, etc.).
	‚Ä¢	Use react-toastify or similar library.

Step 7 ‚Äî UI Design
	‚Ä¢	Use TailwindCSS (or CSS Modules if preferred) for a responsive, mobile-first UI.
	‚Ä¢	Ensure intuitive navigation, button sizing, and input accessibility for touchscreens.
	‚Ä¢	Include a bottom navigation bar or tabs for switching between the 3 main pages.

Step 8 ‚Äî Admin Dashboard (/admin)
	‚Ä¢	Create a hidden route /admin that is not visible in the main navigation.
	‚Ä¢	Require login using Firebase Authentication (Email/Password) before showing admin content.
	‚Ä¢	Admin Dashboard Features:
	‚Ä¢	Secure login screen (basic UI with email/password fields)
	‚Ä¢	After login, show full umbrella list with filters by status/location.
	‚Ä¢	Borrow/return history logs with timestamps and nicknames.
	‚Ä¢	Manual override: reset any umbrella‚Äôs status or force return.
	‚Ä¢	Analytics: most borrowed umbrellas, frequent users, peak times.

Step 9 ‚Äî Deployment Guide
	‚Ä¢	Provide complete instructions for deploying to Firebase Hosting or Vercel.
	‚Ä¢	Include:
	‚Ä¢	Build commands (e.g. npm run build)
	‚Ä¢	Firebase CLI setup (firebase init, etc.)
	‚Ä¢	How to secure .env secrets
	‚Ä¢	How to enable real-time database rules and basic Firebase Auth rules for admin login

Step 10 ‚Äî Output
	‚Ä¢	Provide the full source code for the system, organized cleanly.
	‚Ä¢	Include a concise README.md with:
	‚Ä¢	Project overview
	‚Ä¢	Installation steps
	‚Ä¢	Firebase setup (Auth + DB)
	‚Ä¢	Deployment instructions
	‚Ä¢	License and credit notes

‚ùå Remove: QR code scanning feature ‚Äî not required.
‚ùå Remove: Dark mode functionality ‚Äî not required.

üìå Make sure all instructions and code are beginner-friendly, with comments and clear explanations.

Take a deep breath and work on this problem step-by-step.